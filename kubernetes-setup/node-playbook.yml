---
- hosts: all
  become: true
  tasks:
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common

  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
      state: present

  - name: Install docker and its dependecies
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce
      - docker-ce-cli
      - containerd.io

  - name: Change docker cgroupfs to systemd
    lineinfile:
      path: /lib/systemd/system/docker.service        
      regexp: '^(.*)ExecStart=(.*)$'
      line: 'ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --exec-opt native.cgroupdriver=systemd'
    notify:
      - docker status
  
  - name: Restart docker
    service:
      name: docker
      daemon_reload: yes
      state: restarted

  - name: Add vagrant user to docker group
    user:
      name: vagrant
      group: docker

  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet
        - kubeadm
        - kubectl

  - name: Configure bridge for ip6tables
    lineinfile:
      path: /etc/sysctl.conf
      line: net.bridge.bridge-nf-call-ip6tables = 1
  
  - name: Configure bridge for iptables
    lineinfile:
      path: /etc/sysctl.conf
      line: net.bridge.bridge-nf-call-iptables = 1

  - name: Enable ipv4 forwarding
    command: sysctl -w net.ipv4.ip_forward=1

  - name: Deploy rules
    command: sysctl -p

  - name: Change kubelet cgroupfs to systemd
    lineinfile:
      path: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
      regexp: '^(.*)Environment=\"KUBELET_KUBECONFIG_ARGS(.*)$'
      line: 'Environment="KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"' 

  - name: Add kubelet EXTRA_ARGS
    lineinfile:
      path: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf      
      line: 'Environment="KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}"'
      insertafter: 'Environment="KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"'

  - name: Add kubelet KUBEADM_ARGS
    lineinfile:
      path: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
      line: 'Environment="KUBELET_KUBEADM_ARGS=--cgroup-driver=systemd --pod-infra-container-image=k8s.gcr.io/pause:3.1"'
      insertafter: 'Environment="KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}"'

  - name: Comment EnvironmentFile
    replace:
      path: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
      regexp: 'EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env'
      replace: '#EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env'

  - name: Initialize kubelet config.yaml file
    command: kubeadm init phase kubelet-start

  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted

  - name: Copy the join command to server location
    copy: src=join-command dest=/tmp/join-command.sh mode=0777

  - name: Join the node to cluster
    command: sh /tmp/join-command.sh 

  handlers:
  - name: docker status
    service: name=docker state=started
